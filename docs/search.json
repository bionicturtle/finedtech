[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "finedtech by David Harper, CFA, FRM",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\ncode\n\n\nggplot\n\n\n\n\n\n\n\n\n\n\n\nAug 29, 2023\n\n\nDavid Harper\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nAug 26, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/slope-r2-scatterplots/index.html",
    "href": "posts/slope-r2-scatterplots/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "My scatters\n\n# First scenario\n\n# set.seed(87654321)\nset.seed(54321)\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(patchwork)\nlibrary(RColorBrewer)\n\ngenerate_data &lt;- function(n = 12) {\n  # Generate a random vector of n months for the market's excess returns\n  market_excess_returns &lt;- rnorm(n, 0.05, 0.05)\n  \n  # For the second vector, add a lot of random noise to achieve high beta but low R^2\n  index_1_returns &lt;- 1.2 * market_excess_returns + rnorm(n, 0, 0.12)\n  \n  # For the third vector, add a small amount of random noise to a scaled down version of market's returns\n  index_2_returns &lt;- 0.15 * market_excess_returns + rnorm(n, 0, 0.01)\n  \n  # Return as a data frame\n  df &lt;- data.frame(\n    market_excess_returns = market_excess_returns,\n    index_1_returns = index_1_returns,\n    index_2_returns = index_2_returns\n  )\n  \n  return(df)\n}\n\n# Example usage:\n# df &lt;- generate_data(12)\n# print(df)\n\ndf &lt;- generate_data(12)\n\n# Regress index_1_returns against market_excess_returns\nmodel_1 &lt;- lm(index_1_returns ~ market_excess_returns, data=df)\n\n# Extract slope (beta) and R^2 for model_1\nbeta_1 &lt;- coef(model_1)['market_excess_returns']\nr2_1 &lt;- summary(model_1)$r.squared\n\n# Regress index_2_returns against market_excess_returns\nmodel_2 &lt;- lm(index_2_returns ~ market_excess_returns, data=df)\n\n# Extract slope (beta) and R^2 for model_2\nbeta_2 &lt;- coef(model_2)['market_excess_returns']\nr2_2 &lt;- summary(model_2)$r.squared\n\n# Print results\n\nlabel_1 &lt;- sprintf(\"β = %.2f and R2 = %.2f\", beta_1, r2_1)\nlabel_2 &lt;- sprintf(\"β = %.2f and R2 = %.2f\", beta_2, r2_2)\n\nbound_low &lt;- -0.05\nbound_high &lt;- 0.15\n\np1 &lt;- df %&gt;% ggplot(aes(x = market_excess_returns, y = index_1_returns)) + \n    geom_point(color = \"darkblue\") +\n    geom_smooth(method = \"lm\", se = TRUE, color = \"darkorange\", linewidth = 1.2) +\n    coord_cartesian(xlim = c(bound_low*3, bound_high*3), ylim = c(bound_low*3, bound_high*3)) + \n    annotate(\"text\", x = -0.12, y = 0.42, label = label_1, fontface=\"bold\", hjust = 0) +\n    xlab(\"Market's excess return\") +\n    ylab(\"Index 1\") +\n    theme_minimal()\n\np2 &lt;- df %&gt;% ggplot(aes(x = market_excess_returns, y = index_2_returns)) + \n    geom_point(color = \"darkblue\") +\n    geom_smooth(method = \"lm\", se = TRUE, color = \"darkorange\", linewidth = 1.2) + \n    coord_cartesian(xlim = c(bound_low, bound_high), ylim = c(bound_low, bound_high)) + \n    annotate(\"text\", x = -0.04, y = 0.14, label = label_2, fontface=\"bold\", hjust = 0) +\n    xlab(\"Market's excess return\") +\n    ylab(\"Index 2\") +\n    theme_minimal()\n\np1 + p2\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n# Example usage:\n# plot1 &lt;- plot_regression(df, \"market_excess_returns\", \"index_1_returns\")\n# print(plot1)\n\n# plot2 &lt;- plot_regression(df, \"market_excess_returns\", \"index_2_returns\")\n# print(plot2)\n\n\n# Second scenario\n\nset.seed(97531)\n\n# library(tidyverse)\n# library(patchwork)\n\ngenerate_data &lt;- function(n = 12) {\n  # Generate a random vector of n months for the market's excess returns\n  market_excess_returns &lt;- rnorm(n, 0.05, 0.05)\n  \n  # For the second vector, add a lot of random noise to achieve high beta but low R^2\n  index_1_returns &lt;- 1.8 * market_excess_returns + rnorm(n, 0, 0.02)\n  \n  # For the third vector, add a small amount of random noise to a scaled down version of market's returns\n  index_2_returns &lt;- 0.1 * market_excess_returns + rnorm(n, 0, 0.10)\n  \n  # Return as a data frame\n  df &lt;- data.frame(\n    market_excess_returns = market_excess_returns,\n    index_1_returns = index_1_returns,\n    index_2_returns = index_2_returns\n  )\n  \n  return(df)\n}\n\n# Example usage:\n# df &lt;- generate_data(12)\n# print(df)\n\ndf &lt;- generate_data(12)\n\n# Regress index_1_returns against market_excess_returns\nmodel_1 &lt;- lm(index_1_returns ~ market_excess_returns, data=df)\n\n# Extract slope (beta) and R^2 for model_1\nbeta_1 &lt;- coef(model_1)['market_excess_returns']\nr2_1 &lt;- summary(model_1)$r.squared\n\n# Regress index_2_returns against market_excess_returns\nmodel_2 &lt;- lm(index_2_returns ~ market_excess_returns, data=df)\n\n# Extract slope (beta) and R^2 for model_2\nbeta_2 &lt;- coef(model_2)['market_excess_returns']\nr2_2 &lt;- summary(model_2)$r.squared\n\n# Print results\n\nlabel_1 &lt;- sprintf(\"β = %.2f and R2 = %.2f\", beta_1, r2_1)\nlabel_2 &lt;- sprintf(\"β = %.2f and R2 = %.2f\", beta_2, r2_2)\n\nbound_low &lt;- -0.05\nbound_high &lt;- 0.15\n\np3 &lt;- df %&gt;% ggplot(aes(x = market_excess_returns, y = index_1_returns)) + \n    geom_point(color = \"darkblue\") +\n    geom_smooth(method = \"lm\", se = TRUE, color = \"darkorange\", linewidth = 1.2) +\n    coord_cartesian(xlim = c(bound_low*3, bound_high*3), ylim = c(bound_low*3, bound_high*3)) + \n    annotate(\"text\", x = -0.12, y = 0.42, label = label_1, fontface=\"bold\", hjust = 0) +\n    xlab(\"Market's excess return\") +\n    ylab(\"Index 1\") +\n    theme_minimal()\n\np4 &lt;- df %&gt;% ggplot(aes(x = market_excess_returns, y = index_2_returns)) + \n    geom_point(color = \"darkblue\") +\n    geom_smooth(method = \"lm\", se = TRUE, color = \"darkorange\", linewidth = 1.2) + \n    coord_cartesian(xlim = c(bound_low, bound_high), ylim = c(bound_low, bound_high)) + \n    annotate(\"text\", x = -0.04, y = 0.14, label = label_2, fontface=\"bold\", hjust = 0) +\n    xlab(\"Market's excess return\") +\n    ylab(\"Index 2\") +\n    theme_minimal()\n\np3 + p4\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n# Example usage:\n# plot1 &lt;- plot_regression(df, \"market_excess_returns\", \"index_1_returns\")\n# print(plot1)\n\n# plot2 &lt;- plot_regression(df, \"market_excess_returns\", \"index_2_returns\")\n# print(plot2)\n\n\np1 &lt;- p1 + theme(axis.title = element_blank())\np2 &lt;- p2 + theme(axis.title = element_blank())\np3 &lt;- p3 + theme(axis.title = element_blank())\np4 &lt;- p4 + theme(axis.title = element_blank())\n\n\n(p1 + p2) / (p3 + p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n(p3 + p1) / (p2 + p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'"
  }
]